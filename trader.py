import krakenex
import json
import os

SETTINGS_FILE = "settings.json"

# üîÅ Bet√∂lt√©s f√°jlb√≥l
def load_settings():
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# üîê Alap√©rtelmezett √©rt√©k
SETTINGS = load_settings()
LIVE_TRADING = load_live_trading_setting()

def save_live_trading_setting(value):
    SETTINGS["live_trading"] = value
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(SETTINGS, f, indent=2)


# ‚úÖ Konfigur√°ci√≥s kapcsol√≥
LIVE_TRADING = False 

# Minimum keresked√©si √∂sszeg
MIN_TRADE_EUR = 5.0  

def execute_trade(pair, action, volume, price=None):
    if not pair.endswith("EUR"):
        raise ValueError("A p√°rnak EUR-ban kell v√©gz≈ëdnie.")

    # Minimum √©rt√©k ellen≈ërz√©s
    if float(volume) < MIN_TRADE_EUR / 2:  # mivel 0.25 * amount lehet
        print(f"‚õî A megadott mennyis√©g t√∫l alacsony ({volume}).")
        return {"error": ["Minimum √©rt√©k alatt."]}

    k = krakenex.API()
    k.load_key("kraken.key")

    # El√©rhet≈ë egyenleg lek√©rdez√©se
    balance_resp = k.query_private("Balance")
    if balance_resp.get("error"):
        print("‚ùå Egyenleglek√©rdez√©s hiba:", balance_resp["error"])
        return balance_resp

    base_currency = pair[:3]
    quote_currency = "ZEUR"

    # Egyenlegellen≈ërz√©s
    balance = balance_resp.get("result", {})
    if action.lower() == "buy":
        available = float(balance.get(quote_currency, 0))
        if available < float(volume):
            print(f"‚õî Nincs el√©g {quote_currency} az egyenlegen. El√©rhet≈ë: {available}")
            return {"error": ["Nincs el√©g fedezet."]}
    else:
        available = float(balance.get(base_currency, 0))
        if available < float(volume):
            print(f"‚õî Nincs el√©g {base_currency} elad√°sra. El√©rhet≈ë: {available}")
            return {"error": ["Nincs el√©g coin elad√°sra."]}

    # Keresked√©si h√≠v√°s
    params = {
        "pair": pair,
        "type": action.lower(),
        "ordertype": "market",
        "volume": str(volume)
    }

    if price:
        params["ordertype"] = "limit"
        params["price"] = str(price)

    response = k.query_private("AddOrder", params)

    if response["error"]:
        print("‚ùå Kraken trade hiba:", response["error"])
    else:
        print(f"‚úÖ Sikeres {action.upper()} rendel√©s:", response["result"])

    return response

    LIVE_SETTINGS_FILE = "live_settings.json"

    def save_live_trading_setting(enabled: bool):
        with open(LIVE_SETTINGS_FILE, "w", encoding="utf-8") as f:
            json.dump({"LIVE_TRADING": enabled}, f)

    def load_live_trading_setting() -> bool:
        if os.path.exists(LIVE_SETTINGS_FILE):
            try:
                with open(LIVE_SETTINGS_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    return data.get("LIVE_TRADING", False)
            except Exception as e:
                print("‚ö†Ô∏è Hiba a live_settings.json bet√∂lt√©sekor:", e)
        return False  # alap√©rtelmezett √©rt√©k