import tkinter as tk
from tkinter import ttk
from bot_logic_FULL import analyze_all, plot_ai_decision_graph, calculate_confidence_score, check_price_trigger, save_pending_trade
from portfolio_FULL import get_portfolio
from news_sentiment import get_overall_sentiment
from logger_FULL import log_trade
from scale_in_tracker import (
    record_trade_step, get_position_state, reset_position,
    record_last_sell_time, can_enter_new_buy
)
import trader
from trader import execute_trade
import pandas as pd
import glob
import json
import os


# ----- Glob√°lis √°llapot -----
auto_running = False
after_id = None
if trader.LIVE_TRADING == False:  # √Åll√≠tsd True-ra √©les keresked√©shez!
    pass


# --- GUI inicializ√°l√°s ---
root = tk.Tk()
root.title("AI CryptoBot GUI")
root.geometry("650x700")

# --- Tkinter v√°ltoz√≥k ---
pair_var = tk.StringVar(value="SOLEUR")
amount_var = tk.StringVar(value="5")
interval_var = tk.StringVar(value="15")
timestamp_full_var = tk.StringVar()


price_var = tk.StringVar()
rsi_var = tk.StringVar()
ai_var = tk.StringVar()
rsi_signal_var = tk.StringVar()
sentiment_var = tk.StringVar()
pending_signal_var = tk.StringVar()
portfolio_var = tk.StringVar()
final_decision_var = tk.StringVar()
scalein_var = tk.StringVar()
sell_waiting_var = tk.StringVar()
last_trade_var = tk.StringVar()
live_trading_var = tk.BooleanVar(value=trader.LIVE_TRADING)




# --- Utols√≥ √©l≈ë keresked√©s bet√∂lt√©se ---
def load_last_live_trade():
    if os.path.exists("last_live_trade.json"):
        try:
            with open("last_live_trade.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                time = data.get("time", "‚Äî")
                pair = data.get("pair", "")
                action = data.get("action", "")
                amount = data.get("amount", "")
                return f"{time} ‚Äì {pair} {action} {amount} EUR"
        except Exception as e:
            return f"Hiba bet√∂lt√©skor: {e}"
    return "‚Äî"



# --- D√∂nt√©shoz√≥ f√ºggv√©ny ---
def update_data():

    global after_id

    decision = "NINCS D√ñNT√âS"

    pair = pair_var.get() 
    print("‚è±Ô∏è Automatikus friss√≠t√©s elindult.")
    print("‚ñ∂Ô∏è P√°r:", pair)

    
    amount = float(amount_var.get())
    interval = int(interval_var.get())

    result = analyze_all(pair)
    print("üì¶ Eredm√©ny:", result)

    pair = pair_var.get()
    amount = float(amount_var.get())
    interval = int(interval_var.get())

    result = analyze_all(pair)
    sentiment = get_overall_sentiment()
    portfolio = get_portfolio()

    # GUI friss√≠t√©s
    price_var.set(f"{result['price']:.2f} EUR")
    rsi_var.set(f"{result['rsi']:.2f}")
    ai_var.set("‚¨ÜÔ∏è" if result['ai_prediction'] == 1 else "‚¨áÔ∏è")
    rsi_signal_var.set(result['rsi_signal'])
    sentiment_var.set(sentiment)
    portfolio_var.set(", ".join(f"{k}: {v}" for k, v in portfolio.items() if float(v) > 0))

    score = 0
    if result['rsi_signal'] == "BUY":
        score += 0.2
    elif result['rsi_signal'] == "SELL":
        score -= 0.2
    if result['ai_prediction'] == 1:
        score += 0.5
    else:
        score -= 0.5
    if sentiment == "positive":
        score += 0.3
    elif sentiment == "negative":
        score -= 0.3

    # --- Confidence kisz√°m√≠t√°sa ---
    confidence = calculate_confidence_score(result['rsi_signal'], result['ai_prediction'], sentiment)

    # --- F√ºgg≈ë jelz√©s kezel√©se ---
    price = result['price']
    signal_type = "BUY" if score >= 0.5 and float(portfolio.get('ZEUR', 0)) >= amount else (
                  "SELL" if score <= -0.5 and float(portfolio.get(pair[:3], 0)) > 0 else None)

    if signal_type and not check_price_trigger(signal_type, price, result.get('df', pd.DataFrame())):
        pending_signal_var.set(f"{signal_type} ‚Äì Trigger figyel√©s akt√≠v")
        save_pending_trade(pair, signal_type, confidence, price)
        decision = "‚è≥ F√ºgg≈ëben"
    else:
        pending_signal_var.set("‚Äî")
        
        # Legut√≥bbi √©l≈ë keresked√©s bet√∂lt√©se
    last_trade_var.set(load_last_live_trade())


# --- Elad√°si logika ---
    if score <= -0.5 and float(portfolio.get(pair[:3], 0)) > 0:
        reset_position(pair)
        record_last_sell_time(pair)  # √∫j: elad√°s id≈ëpont ment√©se
        decision = "ELAD√ÅS"
        log_trade(pair, "SELL", result, sentiment, amount)
        if trader.LIVE_TRADING:
            execute_trade("sell", pair, amount)
            print("üí∞ Val√≥s ELAD√ÅS v√©grehajtva.")


    # --- Scale-in poz√≠ci√≥kezel√©s ---
    if score >= 0.5 and float(portfolio.get('ZEUR', 0)) >= amount * 0.25:

        # Csak akkor v√°s√°roljunk √∫jra, ha elad√°s ut√°n √∫j v√©teli jelz√©s √©rkezett
        from datetime import datetime
        if can_enter_new_buy(pair, datetime.now()):
            steps_done = get_position_state(pair)["steps"]
            if steps_done < 4:
                step = record_trade_step(pair, amount)
                decision = f"V√âTEL (l√©p√©s {step}/4)"
                
                              
                buy_amount = round(amount * 0.25, 2)
                log_trade(pair, "BUY", result, sentiment, buy_amount)
                if trader.LIVE_TRADING:
                    execute_trade("buy", pair, buy_amount)
                    print("üí∞ Val√≥s V√âTEL v√©grehajtva.")
            else:
                decision = "M√ÅR TELJES POZ√çCI√ì"
        else:
            decision = "‚è∏Ô∏è Elad√°s ut√°n v√°rakoz√°s ‚Äì √∫j v√©teli jelz√©sre v√°runk"

    final_decision_var.set(decision)
    
    if trader.LIVE_TRADING and ("V√âTEL" in decision or "ELAD√ÅS" in decision):
        final_decision_var.set(f"{decision} ‚úÖ [√âL≈ê]")
    
    from datetime import datetime
    if not can_enter_new_buy(pair, datetime.now()):
        sell_waiting_var.set("V√°rakoz√°s √∫j v√©teli jelz√©sre - ‚õî")
    else:
        sell_waiting_var.set("√öj bel√©p√©s enged√©lyezett - ‚úÖ")

    
    from datetime import datetime
    timestamp_full_var.set("Friss√≠tve: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S"))


    # Sk√°l√°zott bel√©p√©s √°llapota
    steps = get_position_state(pair)["steps"]
    scalein_var.set(f"{steps}/4 l√©p√©s teljes√≠tve")

   
    # üîÑ Trigger szint friss√≠t√©se, ha van akt√≠v poz√≠ci√≥
    if score >= 0.5:
        update_trigger_price(pair, price)


    if auto_running:
        after_id = root.after(interval * 60 * 1000, update_data)

# --- Start/Stop vez√©rl√©s ---
def toggle_auto():
    global auto_running, after_id
    auto_running = not auto_running
    if auto_running:
        start_button.config(text="‚èπÔ∏è Le√°ll√≠t√°s")
        update_data()
    else:
        if after_id:
            root.after_cancel(after_id)
        start_button.config(text="‚ñ∂Ô∏è Ind√≠t√°s")

# --- Grafikon gomb ---
def plot_graph():
    try:
        df_feat = pd.read_csv("features.csv", parse_dates=["time"], index_col="time")
        trade_files = sorted(glob.glob("trades_*.csv"), reverse=True)
        if trade_files:
            df_trades = pd.read_csv(trade_files[0], parse_dates=["D√°tum"])
            df_trades.set_index("D√°tum", inplace=True)
            df_combined = df_feat.join(df_trades[["Akci√≥", "H√≠rhangulat", "AI_predikci√≥"]], how="left")
            df_combined["Akci√≥"] = df_combined["Akci√≥"].fillna("NINCS JELZ√âS")
            df_combined["AI_predikci√≥"] = df_combined["AI_predikci√≥"].fillna("‚¨áÔ∏è")
            df_combined["H√≠rhangulat"] = df_combined["H√≠rhangulat"].fillna("neutral")
            df_combined = df_combined.reset_index().rename(columns={"time": "D√°tum"})
        else:
            df_combined = df_feat.reset_index().rename(columns={"time": "D√°tum"})
            df_combined["Akci√≥"] = "NINCS JELZ√âS"
            df_combined["AI_predikci√≥"] = "‚¨áÔ∏è"
            df_combined["H√≠rhangulat"] = "neutral"
        plot_ai_decision_graph(df_combined)
    except Exception as e:
        print("üìâ Hiba a grafikon megjelen√≠t√©skor:", e)

def toggle_live_trading():
    trader.save_live_trading_setting(live_trading_var.get())
    print("üíæ LIVE_TRADING mentve:", live_trading_var.get())



# --- GUI elrendez√©s (LabelFrame szekci√≥k) ---
ttk.Label(root, text="‚öôÔ∏è Be√°ll√≠t√°sok", font=("Arial", 10, "bold")).pack(anchor="w", padx=10, pady=(10, 0))
frame_settings = ttk.Frame(root)
frame_settings.pack(fill="x", padx=10)

    # --- Friss√≠t√©s gomb ---
ttk.Button(frame_settings, text="üîÑ K√©zi friss√≠t√©s", command=update_data).grid(row=3, column=0, columnspan=2, pady=10)

ttk.Label(frame_settings, text="Coin p√°r:").grid(row=0, column=0, sticky="w")
ttk.Combobox(frame_settings, textvariable=pair_var, values=["SOLEUR", "BTCEUR", "ETHEUR", "DOTEUR", "XRPEUR"]).grid(row=0, column=1)

ttk.Label(frame_settings, text="Keresked√©si √∂sszeg (EUR):").grid(row=1, column=0, sticky="w")
ttk.Entry(frame_settings, textvariable=amount_var).grid(row=1, column=1)

ttk.Label(frame_settings, text="Id≈ëz√≠t√©s (perc):").grid(row=2, column=0, sticky="w")
ttk.Combobox(frame_settings, textvariable=interval_var, values=["5", "10", "15", "30", "60"]).grid(row=2, column=1)

    # √âl≈ë keresked√©s checkbox
ttk.Checkbutton(
    frame_settings,
    text="√âl≈ë keresked√©s enged√©lyez√©se",
    variable=live_trading_var,
    command=lambda: toggle_live_trading()
).grid(row=0, column=4, columnspan=2, sticky="w")

# --- Technikai szekci√≥ ---
frame_tech = ttk.LabelFrame(root, text="üìä Technikai adatok", padding=10)
frame_tech.pack(fill="x", padx=10, pady=5)
frame_tech.columnconfigure(3, weight=1)

for i, (label, var) in enumerate([
    ("El≈ëz≈ë √≥ra z√°r√≥√°rfolyama", price_var), ("RSI", rsi_var),
    ("AI el≈ërejelz√©s", ai_var), ("RSI jelz√©s", rsi_signal_var)
]):
    ttk.Label(frame_tech, text=label + ":").grid(row=i, column=0, sticky="w")
    ttk.Label(frame_tech, textvariable=var).grid(row=i, column=1, sticky="w")

ttk.Label(frame_tech, textvariable=timestamp_full_var, anchor="e").grid(
    row=0, column=0, columnspan=4, sticky="e", padx=(0, 10)
)

# --- Sentiment szekci√≥ ---
frame_sentiment = ttk.LabelFrame(root, text="üóûÔ∏è H√≠rek √©s f√ºgg≈ë jelek", padding=10)
frame_sentiment.pack(fill="x", padx=10, pady=5)

ttk.Label(frame_sentiment, text="H√≠rhangulat:").grid(row=0, column=0, sticky="w")
ttk.Label(frame_sentiment, textvariable=sentiment_var).grid(row=0, column=1, sticky="w")
ttk.Label(frame_sentiment, text="üìå F√ºgg≈ë jelz√©s:").grid(row=1, column=0, sticky="w")
ttk.Label(frame_sentiment, textvariable=pending_signal_var).grid(row=1, column=1, sticky="w")

# --- Portf√≥li√≥ szekci√≥ ---
frame_portfolio = ttk.LabelFrame(root, text="üíº Portf√≥li√≥", padding=10)
frame_portfolio.pack(fill="x", padx=10, pady=5)
ttk.Label(frame_portfolio, textvariable=portfolio_var, wraplength=580).pack(anchor="w")

# --- Scale-in szekci√≥ ---
frame_scale = ttk.LabelFrame(root, text="üìà Sk√°l√°zott bel√©p√©s", padding=10)
frame_scale.pack(fill="x", padx=10, pady=5)
ttk.Label(frame_scale, text="L√©p√©sek sz√°ma:").grid(row=0, column=0, sticky="w")
ttk.Label(frame_scale, textvariable=scalein_var).grid(row=0, column=1, sticky="w")

# --- Elad√°s ut√°ni bel√©p√©si √°llapot ---
frame_waiting = ttk.LabelFrame(root, text="üîÅ Elad√°s ut√°ni st√°tusz", padding=10)
frame_waiting.pack(fill="x", padx=10, pady=5)
ttk.Label(frame_waiting, textvariable=sell_waiting_var, font=("Arial", 10, "italic")).grid(row=0, column=0, sticky="w")

frame_waiting.columnconfigure(0, weight=1)

    # --- Legut√≥bbi val√≥s keresked√©s ---
ttk.Label(frame_waiting, text="Legut√≥bbi val√≥s keresked√©s:").grid(row=0, column=1, sticky="w")
ttk.Label(frame_waiting, textvariable=last_trade_var, font=("Arial", 10), anchor="e", justify="right").grid(row=0, column=2, sticky="e", padx=(10, 0))


# --- Vez√©rl√©s szekci√≥ ---
frame_controls = ttk.LabelFrame(root, text="üéÆ Vez√©rl√©s", padding=10)
frame_controls.pack(fill="x", padx=10, pady=5)

ttk.Label(frame_controls, text="V√©gs≈ë d√∂nt√©s:").grid(row=0, column=0, sticky="w")
ttk.Label(frame_controls, textvariable=final_decision_var, font=("Arial", 12, "bold")).grid(row=0, column=1, sticky="w")

start_button = ttk.Button(frame_controls, text="‚ñ∂Ô∏è Ind√≠t√°s", command=toggle_auto)
start_button.grid(row=1, column=0, pady=5, sticky="w")

ttk.Button(frame_controls, text="üìà Grafikon megjelen√≠t√©se", command=plot_graph).grid(row=1, column=1, pady=5, sticky="w")
ttk.Button(frame_controls, text="Kil√©p√©s", command=root.destroy).grid(row=1, column=2, pady=5, sticky="e")


update_data()

root.mainloop()
